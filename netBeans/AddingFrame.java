package netBeans;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

import java.awt.Dimension;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

import javafx.scene.text.Font;

/**
 *
 * @author X-COMPUTER
 */
public class AddingFrame extends javax.swing.JFrame {

    RoomManager rooms;

    /**
     * Creates new form AddingFrame
     */
    public AddingFrame() {
        initComponents();
        setLocationRelativeTo(null); // center on screen
        setResizable(false);
        getContentPane().setBackground(new java.awt.Color(0x123456)); // black background
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Rooms edit section");
        setBounds(new java.awt.Rectangle(0, 0, 500, 320));
        setAutoRequestFocus(false);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Adding and assigning options");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Enter room id:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Enter customer id:");

        jButton1.setText("Assign room to customer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Add, update and delete customer");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Add, update and delete room");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Add, update and delete service");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Enter customer id to generate invoice:");

        jButton5.setText("Generate invoice");
                jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Generate statistical report");
        jButton6.setToolTipText("");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(156, 156, 156))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButton2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)))
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(53, 53, 53)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
    String customerIdTxt = jTextField3.getText().trim();
    String roomIdTxt = jTextField1.getText().trim();

    if (customerIdTxt.isEmpty() || roomIdTxt.isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "Please fill in both Room ID and Customer ID fields.",
            "Missing Information",
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        int customerId = Integer.parseInt(customerIdTxt);
        int roomId = Integer.parseInt(roomIdTxt);
        RoomManager room = new RoomManager();
        // Call the assign_room method and get the result message
        String result = room.assign_room(roomId, customerId);
        
        // Handle different result cases
        if (result.equals("success")) {
            JOptionPane.showMessageDialog(this,
                "Room " + roomId + " successfully assigned to customer " + customerId,
                "Success",
                JOptionPane.INFORMATION_MESSAGE);
            
            // Clear fields after successful assignment
            jTextField1.setText("");
            jTextField3.setText("");
        } else {
            // Show appropriate error message
            JOptionPane.showMessageDialog(this,
                result,
                "Assignment Error",
                JOptionPane.ERROR_MESSAGE);
        }
    } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this,
            "Both IDs must be valid numbers",
            "Input Error",
            JOptionPane.ERROR_MESSAGE);
    }
}

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {

        new AddUpDelCustomerFrame();

    }

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {

        new AddUpDelRoomFrame();
    }

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {

        new AddUpDelService();
    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {
    String customerIdText = jTextField4.getText().trim();
    
    if (customerIdText.isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "Please enter a Customer ID",
            "Input Required",
            JOptionPane.WARNING_MESSAGE);
        return;
    }

    try {
        int customerId = Integer.parseInt(customerIdText);
        RoomManager roomManager = new RoomManager();
        List<String> invoiceData = roomManager.generate_Invoice(customerId);
        
        if (invoiceData == null || invoiceData.size() < 8) {
            JOptionPane.showMessageDialog(this,
                "No booking information found for Customer ID: " + customerId,
                "Invoice Not Found",
                JOptionPane.WARNING_MESSAGE);
            return;
        }

        // Build formatted invoice
        StringBuilder invoice = new StringBuilder();
        invoice.append("========================================\n");
        invoice.append("              HOTEL INVOICE              \n");
        invoice.append("========================================\n\n");
        invoice.append(String.format("%-20s: %s\n", "Customer Name", invoiceData.get(0)));
        invoice.append(String.format("%-20s: %d\n", "Customer ID", customerId));
        invoice.append("\n---------------- Room Charges --------------\n");
        invoice.append(String.format("%-20s: %d\n", "Room Number", Integer.parseInt(invoiceData.get(1))));
        invoice.append(String.format("%-20s: %d nights\n", "Stay Duration", Integer.parseInt(invoiceData.get(2))));
        invoice.append(String.format("%-20s: $%.2f/night\n", "Room Rate", Double.parseDouble(invoiceData.get(3))));
        invoice.append(String.format("%-20s: $%.2f\n", "Total Room Charges", Double.parseDouble(invoiceData.get(4))));
        invoice.append("\n--------------- Services -----------------\n");
        invoice.append(String.format("%-20s: %s\n", "Services Used", invoiceData.get(5)));
        invoice.append(String.format("%-20s: $%.2f\n", "Total Services", Double.parseDouble(invoiceData.get(6))));
        invoice.append("\n========================================\n");
        invoice.append(String.format("%-20s: $%.2f\n", "TOTAL AMOUNT DUE", Double.parseDouble(invoiceData.get(7))));
        invoice.append("========================================\n");
        invoice.append("\nThank you for your stay!");

        // Display invoice in scrollable dialog
        JTextArea textArea = new JTextArea(invoice.toString());
        textArea.setEditable(false);
        // textArea.setFont(new Font("Monospaced", Font.PLAIN, 14));
        
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(600, 400));
        
        JOptionPane.showMessageDialog(
            this,
            scrollPane,
            "Invoice for Customer ID: " + customerId,
            JOptionPane.INFORMATION_MESSAGE
        );
        
        // Clear field after display
        jTextField4.setText("");
        
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this,
            "Customer ID must be a valid number",
            "Invalid Input",
            JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this,
            "Error generating invoice: " + e.getMessage(),
            "Invoice Error",
            JOptionPane.ERROR_MESSAGE);
        e.printStackTrace();
    }
}

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {
    // Read services data
    List<String> services = Service.readServices();
    if (services.isEmpty()) {
        JOptionPane.showMessageDialog(this, 
            "No services recorded.", 
            "Service Report", 
            JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    // Calculate statistics
    float totalPrice = 0;
    int serviceCount = 0;
    Map<Integer, String> serviceNames = new HashMap<>();

    for (String service : services) {
        try {
            String[] parts = service.split(",");
            int service_id = Integer.parseInt(parts[0]);
            String service_name = parts[1];
            float price = Float.parseFloat(parts[3]);

            serviceNames.put(service_id, service_name);
            totalPrice += price;
            serviceCount++;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Error parsing service data: " + e.getMessage(),
                "Data Error",
                JOptionPane.ERROR_MESSAGE);
            return;
        }
    }

    float averagePrice = (serviceCount > 0) ? totalPrice / serviceCount : 0;

    // Count service requests from rooms.txt
    Map<Integer, Integer> serviceRequestCount = new HashMap<>();
    try (BufferedReader reader = new BufferedReader(new FileReader("D:\\designs\\testPlProject3\\rooms.txt"))) {
        String line;
        while ((line = reader.readLine()) != null) {
            try {
                String[] parts = line.split(",");
                if (parts.length > 1) {
                    int service_id = Integer.parseInt(parts[1]);
                    serviceRequestCount.put(service_id, serviceRequestCount.getOrDefault(service_id, 0) + 1);
                }
            } catch (Exception e) {
                System.err.println("Skipping malformed room entry: " + line);
            }
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(this,
            "Error reading rooms.txt: " + e.getMessage(),
            "File Error",
            JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Find most requested service
    int mostRequestedServiceId = -1;
    int maxRequests = 0;
    for (Map.Entry<Integer, Integer> entry : serviceRequestCount.entrySet()) {
        if (entry.getValue() > maxRequests) {
            mostRequestedServiceId = entry.getKey();
            maxRequests = entry.getValue();
        }
    }

    // Build the report message
    StringBuilder report = new StringBuilder();
    report.append("=== SERVICE USAGE REPORT ===\n\n");
    report.append(String.format("%-25s: %d\n", "Total services recorded", serviceCount));
    report.append(String.format("%-25s: $%.2f\n\n", "Average service price", averagePrice));

    if (mostRequestedServiceId == -1) {
        report.append("No service requests found in room bookings.");
    } else {
        report.append("MOST REQUESTED SERVICE\n");
        report.append(String.format("%-15s: %d\n", "Service ID", mostRequestedServiceId));
        report.append(String.format("%-15s: %s\n", "Service Name", serviceNames.getOrDefault(mostRequestedServiceId, "Unknown")));
        report.append(String.format("%-15s: %d", "Total Requests", maxRequests));
    }

    // Display the report in a scrollable dialog
    JTextArea textArea = new JTextArea(report.toString());
    textArea.setEditable(false);
    // textArea.setCaretColor(new Font("Monospaced", Font.PLAIN, 12));
    JScrollPane scrollPane = new JScrollPane(textArea);
    scrollPane.setPreferredSize(new Dimension(500, 300));
    
    JOptionPane.showMessageDialog(
        this,
        scrollPane,
        "Service Usage Report",
        JOptionPane.INFORMATION_MESSAGE
    );
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddingFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AddingFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration                   
}
